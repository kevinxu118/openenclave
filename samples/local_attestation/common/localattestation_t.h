/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_LOCALATTESTATION_T_H
#define EDGER8R_LOCALATTESTATION_T_H

#include <openenclave/enclave.h>

#include "localattestation_args.h"

OE_EXTERNC_BEGIN

/**** Trusted function IDs ****/
enum
{
    localattestation_fcn_id_get_target_info = 0,
    localattestation_fcn_id_get_targeted_report_with_pubkey = 1,
    localattestation_fcn_id_verify_report_and_set_pubkey = 2,
    localattestation_fcn_id_generate_encrypted_message = 3,
    localattestation_fcn_id_process_encrypted_msg = 4,
    localattestation_fcn_id_oe_verify_report_ecall = 5,
    localattestation_fcn_id_oe_log_init_ecall = 6,
    localattestation_fcn_id_oe_syscall_stub_ecall = 7,
    localattestation_fcn_id_oe_get_sgx_report_ecall = 8,
    localattestation_fcn_id_oe_get_report_v2_ecall = 9,
    localattestation_fcn_id_oe_verify_local_report_ecall = 10,
    localattestation_fcn_id_oe_sgx_init_context_switchless_ecall = 11,
    localattestation_fcn_id_oe_sgx_switchless_enclave_worker_thread_ecall = 12,
    localattestation_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** ECALL marshalling structs. ****/
typedef struct _get_target_info_args_t
{
    oe_result_t _result;
    int _retval;
    uint8_t** target_info_buffer;
    size_t* target_info_size;
} get_target_info_args_t;

typedef struct _get_targeted_report_with_pubkey_args_t
{
    oe_result_t _result;
    int _retval;
    uint8_t* target_info_buffer;
    size_t target_info_size;
    uint8_t** pem_key;
    size_t* pem_key_size;
    uint8_t** report;
    size_t* report_size;
} get_targeted_report_with_pubkey_args_t;

typedef struct _verify_report_and_set_pubkey_args_t
{
    oe_result_t _result;
    int _retval;
    uint8_t* pem_key;
    size_t key_size;
    uint8_t* report;
    size_t report_size;
} verify_report_and_set_pubkey_args_t;

typedef struct _generate_encrypted_message_args_t
{
    oe_result_t _result;
    int _retval;
    uint8_t** data;
    size_t* size;
} generate_encrypted_message_args_t;

typedef struct _process_encrypted_msg_args_t
{
    oe_result_t _result;
    int _retval;
    uint8_t* data;
    size_t size;
} process_encrypted_msg_args_t;

typedef struct _oe_verify_report_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* report;
    size_t report_size;
} oe_verify_report_ecall_args_t;

typedef struct _oe_log_init_ecall_args_t
{
    oe_result_t _result;
    char* enclave_path;
    size_t enclave_path_len;
    uint32_t log_level;
} oe_log_init_ecall_args_t;

typedef struct _oe_syscall_stub_ecall_args_t
{
    oe_result_t _result;
} oe_syscall_stub_ecall_args_t;

typedef struct _oe_get_sgx_report_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* opt_params;
    size_t opt_params_size;
    sgx_report_t* report;
} oe_get_sgx_report_ecall_args_t;

typedef struct _oe_get_report_v2_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    uint32_t flags;
    void* opt_params;
    size_t opt_params_size;
    uint8_t** report_buffer;
    size_t* report_buffer_size;
} oe_get_report_v2_ecall_args_t;

typedef struct _oe_verify_local_report_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    uint8_t* report;
    size_t report_size;
    oe_report_t* parsed_report;
} oe_verify_local_report_ecall_args_t;

typedef struct _oe_sgx_init_context_switchless_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_host_worker_context_t* host_worker_contexts;
    uint64_t num_host_workers;
} oe_sgx_init_context_switchless_ecall_args_t;

typedef struct _oe_sgx_switchless_enclave_worker_thread_ecall_args_t
{
    oe_result_t _result;
    oe_enclave_worker_context_t* context;
} oe_sgx_switchless_enclave_worker_thread_ecall_args_t;

/**** ECALL prototypes. ****/
int get_target_info(
    uint8_t** target_info_buffer,
    size_t* target_info_size);

int get_targeted_report_with_pubkey(
    uint8_t* target_info_buffer,
    size_t target_info_size,
    uint8_t** pem_key,
    size_t* pem_key_size,
    uint8_t** report,
    size_t* report_size);

int verify_report_and_set_pubkey(
    uint8_t* pem_key,
    size_t key_size,
    uint8_t* report,
    size_t report_size);

int generate_encrypted_message(
    uint8_t** data,
    size_t* size);

int process_encrypted_msg(
    uint8_t* data,
    size_t size);

oe_result_t oe_verify_report_ecall(
    const void* report,
    size_t report_size);

void oe_log_init_ecall(
    const char* enclave_path,
    uint32_t log_level);

void oe_syscall_stub_ecall(void);

oe_result_t oe_get_sgx_report_ecall(
    const void* opt_params,
    size_t opt_params_size,
    sgx_report_t* report);

oe_result_t oe_get_report_v2_ecall(
    uint32_t flags,
    const void* opt_params,
    size_t opt_params_size,
    uint8_t** report_buffer,
    size_t* report_buffer_size);

oe_result_t oe_verify_local_report_ecall(
    const uint8_t* report,
    size_t report_size,
    oe_report_t* parsed_report);

oe_result_t oe_sgx_init_context_switchless_ecall(
    oe_host_worker_context_t* host_worker_contexts,
    uint64_t num_host_workers);

void oe_sgx_switchless_enclave_worker_thread_ecall(oe_enclave_worker_context_t* context);

/**** Untrusted function IDs. ****/
enum
{
    localattestation_fcn_id_oe_log_ocall = 0,
    localattestation_fcn_id_oe_write_ocall = 1,
    localattestation_fcn_id_oe_syscall_epoll_create1_ocall = 2,
    localattestation_fcn_id_oe_syscall_epoll_wait_ocall = 3,
    localattestation_fcn_id_oe_syscall_epoll_wake_ocall = 4,
    localattestation_fcn_id_oe_syscall_epoll_ctl_ocall = 5,
    localattestation_fcn_id_oe_syscall_epoll_close_ocall = 6,
    localattestation_fcn_id_oe_syscall_open_ocall = 7,
    localattestation_fcn_id_oe_syscall_read_ocall = 8,
    localattestation_fcn_id_oe_syscall_write_ocall = 9,
    localattestation_fcn_id_oe_syscall_readv_ocall = 10,
    localattestation_fcn_id_oe_syscall_writev_ocall = 11,
    localattestation_fcn_id_oe_syscall_lseek_ocall = 12,
    localattestation_fcn_id_oe_syscall_pread_ocall = 13,
    localattestation_fcn_id_oe_syscall_pwrite_ocall = 14,
    localattestation_fcn_id_oe_syscall_close_ocall = 15,
    localattestation_fcn_id_oe_syscall_dup_ocall = 16,
    localattestation_fcn_id_oe_syscall_opendir_ocall = 17,
    localattestation_fcn_id_oe_syscall_readdir_ocall = 18,
    localattestation_fcn_id_oe_syscall_rewinddir_ocall = 19,
    localattestation_fcn_id_oe_syscall_closedir_ocall = 20,
    localattestation_fcn_id_oe_syscall_stat_ocall = 21,
    localattestation_fcn_id_oe_syscall_access_ocall = 22,
    localattestation_fcn_id_oe_syscall_link_ocall = 23,
    localattestation_fcn_id_oe_syscall_unlink_ocall = 24,
    localattestation_fcn_id_oe_syscall_rename_ocall = 25,
    localattestation_fcn_id_oe_syscall_truncate_ocall = 26,
    localattestation_fcn_id_oe_syscall_mkdir_ocall = 27,
    localattestation_fcn_id_oe_syscall_rmdir_ocall = 28,
    localattestation_fcn_id_oe_syscall_fcntl_ocall = 29,
    localattestation_fcn_id_oe_syscall_ioctl_ocall = 30,
    localattestation_fcn_id_oe_syscall_poll_ocall = 31,
    localattestation_fcn_id_oe_syscall_kill_ocall = 32,
    localattestation_fcn_id_oe_syscall_close_socket_ocall = 33,
    localattestation_fcn_id_oe_syscall_socket_ocall = 34,
    localattestation_fcn_id_oe_syscall_shutdown_sockets_device_ocall = 35,
    localattestation_fcn_id_oe_syscall_socketpair_ocall = 36,
    localattestation_fcn_id_oe_syscall_connect_ocall = 37,
    localattestation_fcn_id_oe_syscall_accept_ocall = 38,
    localattestation_fcn_id_oe_syscall_bind_ocall = 39,
    localattestation_fcn_id_oe_syscall_listen_ocall = 40,
    localattestation_fcn_id_oe_syscall_recvmsg_ocall = 41,
    localattestation_fcn_id_oe_syscall_sendmsg_ocall = 42,
    localattestation_fcn_id_oe_syscall_recv_ocall = 43,
    localattestation_fcn_id_oe_syscall_recvfrom_ocall = 44,
    localattestation_fcn_id_oe_syscall_send_ocall = 45,
    localattestation_fcn_id_oe_syscall_sendto_ocall = 46,
    localattestation_fcn_id_oe_syscall_recvv_ocall = 47,
    localattestation_fcn_id_oe_syscall_sendv_ocall = 48,
    localattestation_fcn_id_oe_syscall_shutdown_ocall = 49,
    localattestation_fcn_id_oe_syscall_setsockopt_ocall = 50,
    localattestation_fcn_id_oe_syscall_getsockopt_ocall = 51,
    localattestation_fcn_id_oe_syscall_getsockname_ocall = 52,
    localattestation_fcn_id_oe_syscall_getpeername_ocall = 53,
    localattestation_fcn_id_oe_syscall_getaddrinfo_open_ocall = 54,
    localattestation_fcn_id_oe_syscall_getaddrinfo_read_ocall = 55,
    localattestation_fcn_id_oe_syscall_getaddrinfo_close_ocall = 56,
    localattestation_fcn_id_oe_syscall_getnameinfo_ocall = 57,
    localattestation_fcn_id_oe_syscall_nanosleep_ocall = 58,
    localattestation_fcn_id_oe_syscall_getpid_ocall = 59,
    localattestation_fcn_id_oe_syscall_getppid_ocall = 60,
    localattestation_fcn_id_oe_syscall_getpgrp_ocall = 61,
    localattestation_fcn_id_oe_syscall_getuid_ocall = 62,
    localattestation_fcn_id_oe_syscall_geteuid_ocall = 63,
    localattestation_fcn_id_oe_syscall_getgid_ocall = 64,
    localattestation_fcn_id_oe_syscall_getegid_ocall = 65,
    localattestation_fcn_id_oe_syscall_getpgid_ocall = 66,
    localattestation_fcn_id_oe_syscall_getgroups_ocall = 67,
    localattestation_fcn_id_oe_syscall_uname_ocall = 68,
    localattestation_fcn_id_oe_get_supported_attester_format_ids_ocall = 69,
    localattestation_fcn_id_oe_get_qetarget_info_ocall = 70,
    localattestation_fcn_id_oe_get_quote_ocall = 71,
    localattestation_fcn_id_oe_get_quote_verification_collateral_ocall = 72,
    localattestation_fcn_id_oe_sgx_get_cpuid_table_ocall = 73,
    localattestation_fcn_id_oe_sgx_backtrace_symbols_ocall = 74,
    localattestation_fcn_id_oe_sgx_thread_wake_wait_ocall = 75,
    localattestation_fcn_id_oe_sgx_wake_switchless_worker_ocall = 76,
    localattestation_fcn_id_oe_sgx_sleep_switchless_worker_ocall = 77,
    localattestation_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

/**** OCALL marshalling structs. ****/
typedef struct _oe_log_ocall_args_t
{
    oe_result_t _result;
    uint32_t log_level;
    char* message;
    size_t message_len;
} oe_log_ocall_args_t;

typedef struct _oe_write_ocall_args_t
{
    oe_result_t _result;
    int device;
    char* str;
    size_t str_len;
    size_t maxlen;
} oe_write_ocall_args_t;

typedef struct _oe_syscall_epoll_create1_ocall_args_t
{
    oe_result_t _result;
    oe_host_fd_t _retval;
    int flags;
    int _ocall_errno;
} oe_syscall_epoll_create1_ocall_args_t;

typedef struct _oe_syscall_epoll_wait_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    int64_t epfd;
    struct oe_epoll_event* events;
    unsigned int maxevents;
    int timeout;
    int _ocall_errno;
} oe_syscall_epoll_wait_ocall_args_t;

typedef struct _oe_syscall_epoll_wake_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    int _ocall_errno;
} oe_syscall_epoll_wake_ocall_args_t;

typedef struct _oe_syscall_epoll_ctl_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    int64_t epfd;
    int op;
    int64_t fd;
    struct oe_epoll_event* event;
    int _ocall_errno;
} oe_syscall_epoll_ctl_ocall_args_t;

typedef struct _oe_syscall_epoll_close_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t epfd;
    int _ocall_errno;
} oe_syscall_epoll_close_ocall_args_t;

typedef struct _oe_syscall_open_ocall_args_t
{
    oe_result_t _result;
    oe_host_fd_t _retval;
    char* pathname;
    size_t pathname_len;
    int flags;
    oe_mode_t mode;
    int _ocall_errno;
} oe_syscall_open_ocall_args_t;

typedef struct _oe_syscall_read_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* buf;
    size_t count;
    int _ocall_errno;
} oe_syscall_read_ocall_args_t;

typedef struct _oe_syscall_write_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* buf;
    size_t count;
    int _ocall_errno;
} oe_syscall_write_ocall_args_t;

typedef struct _oe_syscall_readv_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* iov_buf;
    int iovcnt;
    size_t iov_buf_size;
    int _ocall_errno;
} oe_syscall_readv_ocall_args_t;

typedef struct _oe_syscall_writev_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* iov_buf;
    int iovcnt;
    size_t iov_buf_size;
    int _ocall_errno;
} oe_syscall_writev_ocall_args_t;

typedef struct _oe_syscall_lseek_ocall_args_t
{
    oe_result_t _result;
    oe_off_t _retval;
    oe_host_fd_t fd;
    oe_off_t offset;
    int whence;
    int _ocall_errno;
} oe_syscall_lseek_ocall_args_t;

typedef struct _oe_syscall_pread_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* buf;
    size_t count;
    oe_off_t offset;
    int _ocall_errno;
} oe_syscall_pread_ocall_args_t;

typedef struct _oe_syscall_pwrite_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* buf;
    size_t count;
    oe_off_t offset;
    int _ocall_errno;
} oe_syscall_pwrite_ocall_args_t;

typedef struct _oe_syscall_close_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t fd;
    int _ocall_errno;
} oe_syscall_close_ocall_args_t;

typedef struct _oe_syscall_dup_ocall_args_t
{
    oe_result_t _result;
    oe_host_fd_t _retval;
    oe_host_fd_t oldfd;
    int _ocall_errno;
} oe_syscall_dup_ocall_args_t;

typedef struct _oe_syscall_opendir_ocall_args_t
{
    oe_result_t _result;
    uint64_t _retval;
    char* name;
    size_t name_len;
    int _ocall_errno;
} oe_syscall_opendir_ocall_args_t;

typedef struct _oe_syscall_readdir_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    uint64_t dirp;
    struct oe_dirent* entry;
    int _ocall_errno;
} oe_syscall_readdir_ocall_args_t;

typedef struct _oe_syscall_rewinddir_ocall_args_t
{
    oe_result_t _result;
    uint64_t dirp;
} oe_syscall_rewinddir_ocall_args_t;

typedef struct _oe_syscall_closedir_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    uint64_t dirp;
    int _ocall_errno;
} oe_syscall_closedir_ocall_args_t;

typedef struct _oe_syscall_stat_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* pathname;
    size_t pathname_len;
    struct oe_stat_t* buf;
    int _ocall_errno;
} oe_syscall_stat_ocall_args_t;

typedef struct _oe_syscall_access_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* pathname;
    size_t pathname_len;
    int mode;
    int _ocall_errno;
} oe_syscall_access_ocall_args_t;

typedef struct _oe_syscall_link_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* oldpath;
    size_t oldpath_len;
    char* newpath;
    size_t newpath_len;
    int _ocall_errno;
} oe_syscall_link_ocall_args_t;

typedef struct _oe_syscall_unlink_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* pathname;
    size_t pathname_len;
    int _ocall_errno;
} oe_syscall_unlink_ocall_args_t;

typedef struct _oe_syscall_rename_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* oldpath;
    size_t oldpath_len;
    char* newpath;
    size_t newpath_len;
    int _ocall_errno;
} oe_syscall_rename_ocall_args_t;

typedef struct _oe_syscall_truncate_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* path;
    size_t path_len;
    oe_off_t length;
    int _ocall_errno;
} oe_syscall_truncate_ocall_args_t;

typedef struct _oe_syscall_mkdir_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* pathname;
    size_t pathname_len;
    oe_mode_t mode;
    int _ocall_errno;
} oe_syscall_mkdir_ocall_args_t;

typedef struct _oe_syscall_rmdir_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* pathname;
    size_t pathname_len;
    int _ocall_errno;
} oe_syscall_rmdir_ocall_args_t;

typedef struct _oe_syscall_fcntl_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t fd;
    int cmd;
    uint64_t arg;
    uint64_t argsize;
    void* argout;
    int _ocall_errno;
} oe_syscall_fcntl_ocall_args_t;

typedef struct _oe_syscall_ioctl_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t fd;
    uint64_t request;
    uint64_t arg;
    uint64_t argsize;
    void* argout;
    int _ocall_errno;
} oe_syscall_ioctl_ocall_args_t;

typedef struct _oe_syscall_poll_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    struct oe_host_pollfd* host_fds;
    oe_nfds_t nfds;
    int timeout;
    int _ocall_errno;
} oe_syscall_poll_ocall_args_t;

typedef struct _oe_syscall_kill_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    int pid;
    int signum;
    int _ocall_errno;
} oe_syscall_kill_ocall_args_t;

typedef struct _oe_syscall_close_socket_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    int _ocall_errno;
} oe_syscall_close_socket_ocall_args_t;

typedef struct _oe_syscall_socket_ocall_args_t
{
    oe_result_t _result;
    oe_host_fd_t _retval;
    int domain;
    int type;
    int protocol;
    int _ocall_errno;
} oe_syscall_socket_ocall_args_t;

typedef struct _oe_syscall_shutdown_sockets_device_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    int _ocall_errno;
} oe_syscall_shutdown_sockets_device_ocall_args_t;

typedef struct _oe_syscall_socketpair_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    int domain;
    int type;
    int protocol;
    oe_host_fd_t* sv;
    int _ocall_errno;
} oe_syscall_socketpair_ocall_args_t;

typedef struct _oe_syscall_connect_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    struct oe_sockaddr* addr;
    oe_socklen_t addrlen;
    int _ocall_errno;
} oe_syscall_connect_ocall_args_t;

typedef struct _oe_syscall_accept_ocall_args_t
{
    oe_result_t _result;
    oe_host_fd_t _retval;
    oe_host_fd_t sockfd;
    struct oe_sockaddr* addr;
    oe_socklen_t addrlen_in;
    oe_socklen_t* addrlen_out;
    int _ocall_errno;
} oe_syscall_accept_ocall_args_t;

typedef struct _oe_syscall_bind_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    struct oe_sockaddr* addr;
    oe_socklen_t addrlen;
    int _ocall_errno;
} oe_syscall_bind_ocall_args_t;

typedef struct _oe_syscall_listen_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    int backlog;
    int _ocall_errno;
} oe_syscall_listen_ocall_args_t;

typedef struct _oe_syscall_recvmsg_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t sockfd;
    void* msg_name;
    oe_socklen_t msg_namelen;
    oe_socklen_t* msg_namelen_out;
    void* msg_iov_buf;
    size_t msg_iovlen;
    size_t msg_iov_buf_size;
    void* msg_control;
    size_t msg_controllen;
    size_t* msg_controllen_out;
    int flags;
    int _ocall_errno;
} oe_syscall_recvmsg_ocall_args_t;

typedef struct _oe_syscall_sendmsg_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t sockfd;
    void* msg_name;
    oe_socklen_t msg_namelen;
    void* msg_iov_buf;
    size_t msg_iovlen;
    size_t msg_iov_buf_size;
    void* msg_control;
    size_t msg_controllen;
    int flags;
    int _ocall_errno;
} oe_syscall_sendmsg_ocall_args_t;

typedef struct _oe_syscall_recv_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t sockfd;
    void* buf;
    size_t len;
    int flags;
    int _ocall_errno;
} oe_syscall_recv_ocall_args_t;

typedef struct _oe_syscall_recvfrom_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t sockfd;
    void* buf;
    size_t len;
    int flags;
    struct oe_sockaddr* src_addr;
    oe_socklen_t addrlen_in;
    oe_socklen_t* addrlen_out;
    int _ocall_errno;
} oe_syscall_recvfrom_ocall_args_t;

typedef struct _oe_syscall_send_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t sockfd;
    void* buf;
    size_t len;
    int flags;
    int _ocall_errno;
} oe_syscall_send_ocall_args_t;

typedef struct _oe_syscall_sendto_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t sockfd;
    void* buf;
    size_t len;
    int flags;
    struct oe_sockaddr* dest_addr;
    oe_socklen_t addrlen;
    int _ocall_errno;
} oe_syscall_sendto_ocall_args_t;

typedef struct _oe_syscall_recvv_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* iov_buf;
    int iovcnt;
    size_t iov_buf_size;
    int _ocall_errno;
} oe_syscall_recvv_ocall_args_t;

typedef struct _oe_syscall_sendv_ocall_args_t
{
    oe_result_t _result;
    ssize_t _retval;
    oe_host_fd_t fd;
    void* iov_buf;
    int iovcnt;
    size_t iov_buf_size;
    int _ocall_errno;
} oe_syscall_sendv_ocall_args_t;

typedef struct _oe_syscall_shutdown_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    int how;
    int _ocall_errno;
} oe_syscall_shutdown_ocall_args_t;

typedef struct _oe_syscall_setsockopt_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    int level;
    int optname;
    void* optval;
    oe_socklen_t optlen;
    int _ocall_errno;
} oe_syscall_setsockopt_ocall_args_t;

typedef struct _oe_syscall_getsockopt_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    int level;
    int optname;
    void* optval;
    oe_socklen_t optlen_in;
    oe_socklen_t* optlen_out;
    int _ocall_errno;
} oe_syscall_getsockopt_ocall_args_t;

typedef struct _oe_syscall_getsockname_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    struct oe_sockaddr* addr;
    oe_socklen_t addrlen_in;
    oe_socklen_t* addrlen_out;
    int _ocall_errno;
} oe_syscall_getsockname_ocall_args_t;

typedef struct _oe_syscall_getpeername_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    oe_host_fd_t sockfd;
    struct oe_sockaddr* addr;
    oe_socklen_t addrlen_in;
    oe_socklen_t* addrlen_out;
    int _ocall_errno;
} oe_syscall_getpeername_ocall_args_t;

typedef struct _oe_syscall_getaddrinfo_open_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    char* node;
    size_t node_len;
    char* service;
    size_t service_len;
    struct oe_addrinfo* hints;
    uint64_t* handle;
    int _ocall_errno;
} oe_syscall_getaddrinfo_open_ocall_args_t;

typedef struct _oe_syscall_getaddrinfo_read_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    uint64_t handle;
    int* ai_flags;
    int* ai_family;
    int* ai_socktype;
    int* ai_protocol;
    oe_socklen_t ai_addrlen_in;
    oe_socklen_t* ai_addrlen;
    struct oe_sockaddr* ai_addr;
    size_t ai_canonnamelen_in;
    size_t* ai_canonnamelen;
    char* ai_canonname;
    int _ocall_errno;
} oe_syscall_getaddrinfo_read_ocall_args_t;

typedef struct _oe_syscall_getaddrinfo_close_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    uint64_t handle;
    int _ocall_errno;
} oe_syscall_getaddrinfo_close_ocall_args_t;

typedef struct _oe_syscall_getnameinfo_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    struct oe_sockaddr* sa;
    oe_socklen_t salen;
    char* host;
    oe_socklen_t hostlen;
    char* serv;
    oe_socklen_t servlen;
    int flags;
    int _ocall_errno;
} oe_syscall_getnameinfo_ocall_args_t;

typedef struct _oe_syscall_nanosleep_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    struct oe_timespec* req;
    struct oe_timespec* rem;
    int _ocall_errno;
} oe_syscall_nanosleep_ocall_args_t;

typedef struct _oe_syscall_getpid_ocall_args_t
{
    oe_result_t _result;
    int _retval;
} oe_syscall_getpid_ocall_args_t;

typedef struct _oe_syscall_getppid_ocall_args_t
{
    oe_result_t _result;
    int _retval;
} oe_syscall_getppid_ocall_args_t;

typedef struct _oe_syscall_getpgrp_ocall_args_t
{
    oe_result_t _result;
    int _retval;
} oe_syscall_getpgrp_ocall_args_t;

typedef struct _oe_syscall_getuid_ocall_args_t
{
    oe_result_t _result;
    unsigned int _retval;
} oe_syscall_getuid_ocall_args_t;

typedef struct _oe_syscall_geteuid_ocall_args_t
{
    oe_result_t _result;
    unsigned int _retval;
} oe_syscall_geteuid_ocall_args_t;

typedef struct _oe_syscall_getgid_ocall_args_t
{
    oe_result_t _result;
    unsigned int _retval;
} oe_syscall_getgid_ocall_args_t;

typedef struct _oe_syscall_getegid_ocall_args_t
{
    oe_result_t _result;
    unsigned int _retval;
} oe_syscall_getegid_ocall_args_t;

typedef struct _oe_syscall_getpgid_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    int pid;
    int _ocall_errno;
} oe_syscall_getpgid_ocall_args_t;

typedef struct _oe_syscall_getgroups_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    size_t size;
    unsigned int* list;
    int _ocall_errno;
} oe_syscall_getgroups_ocall_args_t;

typedef struct _oe_syscall_uname_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    struct oe_utsname* buf;
    int _ocall_errno;
} oe_syscall_uname_ocall_args_t;

typedef struct _oe_get_supported_attester_format_ids_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* format_ids;
    size_t format_ids_size;
    size_t* format_ids_size_out;
} oe_get_supported_attester_format_ids_ocall_args_t;

typedef struct _oe_get_qetarget_info_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_uuid_t* format_id;
    void* opt_params;
    size_t opt_params_size;
    sgx_target_info_t* target_info;
} oe_get_qetarget_info_ocall_args_t;

typedef struct _oe_get_quote_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_uuid_t* format_id;
    void* opt_params;
    size_t opt_params_size;
    sgx_report_t* sgx_report;
    void* quote;
    size_t quote_size;
    size_t* quote_size_out;
} oe_get_quote_ocall_args_t;

typedef struct _oe_get_quote_verification_collateral_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    uint8_t* fmspc;
    void* tcb_info;
    size_t tcb_info_size;
    size_t* tcb_info_size_out;
    void* tcb_info_issuer_chain;
    size_t tcb_info_issuer_chain_size;
    size_t* tcb_info_issuer_chain_size_out;
    void* pck_crl;
    size_t pck_crl_size;
    size_t* pck_crl_size_out;
    void* root_ca_crl;
    size_t root_ca_crl_size;
    size_t* root_ca_crl_size_out;
    void* pck_crl_issuer_chain;
    size_t pck_crl_issuer_chain_size;
    size_t* pck_crl_issuer_chain_size_out;
    void* qe_identity;
    size_t qe_identity_size;
    size_t* qe_identity_size_out;
    void* qe_identity_issuer_chain;
    size_t qe_identity_issuer_chain_size;
    size_t* qe_identity_issuer_chain_size_out;
} oe_get_quote_verification_collateral_ocall_args_t;

typedef struct _oe_sgx_get_cpuid_table_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* cpuid_table_buffer;
    size_t cpuid_table_buffer_size;
} oe_sgx_get_cpuid_table_ocall_args_t;

typedef struct _oe_sgx_backtrace_symbols_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_enclave_t* oe_enclave;
    uint64_t* buffer;
    size_t size;
    void* symbols_buffer;
    size_t symbols_buffer_size;
    size_t* symbols_buffer_size_out;
} oe_sgx_backtrace_symbols_ocall_args_t;

typedef struct _oe_sgx_thread_wake_wait_ocall_args_t
{
    oe_result_t _result;
    oe_enclave_t* oe_enclave;
    uint64_t waiter_tcs;
    uint64_t self_tcs;
} oe_sgx_thread_wake_wait_ocall_args_t;

typedef struct _oe_sgx_wake_switchless_worker_ocall_args_t
{
    oe_result_t _result;
    oe_host_worker_context_t* context;
} oe_sgx_wake_switchless_worker_ocall_args_t;

typedef struct _oe_sgx_sleep_switchless_worker_ocall_args_t
{
    oe_result_t _result;
    oe_enclave_worker_context_t* context;
} oe_sgx_sleep_switchless_worker_ocall_args_t;

/**** OCALL prototypes. ****/
oe_result_t oe_log_ocall(
    uint32_t log_level,
    const char* message);

oe_result_t oe_write_ocall(
    int device,
    const char* str,
    size_t maxlen);

oe_result_t oe_syscall_epoll_create1_ocall(
    oe_host_fd_t* _retval,
    int flags);

oe_result_t oe_syscall_epoll_wait_ocall(
    int* _retval,
    int64_t epfd,
    struct oe_epoll_event* events,
    unsigned int maxevents,
    int timeout);

oe_result_t oe_syscall_epoll_wake_ocall(int* _retval);

oe_result_t oe_syscall_epoll_ctl_ocall(
    int* _retval,
    int64_t epfd,
    int op,
    int64_t fd,
    struct oe_epoll_event* event);

oe_result_t oe_syscall_epoll_close_ocall(
    int* _retval,
    oe_host_fd_t epfd);

oe_result_t oe_syscall_open_ocall(
    oe_host_fd_t* _retval,
    const char* pathname,
    int flags,
    oe_mode_t mode);

oe_result_t oe_syscall_read_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    void* buf,
    size_t count);

oe_result_t oe_syscall_write_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    const void* buf,
    size_t count);

oe_result_t oe_syscall_readv_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

oe_result_t oe_syscall_writev_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    const void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

oe_result_t oe_syscall_lseek_ocall(
    oe_off_t* _retval,
    oe_host_fd_t fd,
    oe_off_t offset,
    int whence);

oe_result_t oe_syscall_pread_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    void* buf,
    size_t count,
    oe_off_t offset);

oe_result_t oe_syscall_pwrite_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    const void* buf,
    size_t count,
    oe_off_t offset);

oe_result_t oe_syscall_close_ocall(
    int* _retval,
    oe_host_fd_t fd);

oe_result_t oe_syscall_dup_ocall(
    oe_host_fd_t* _retval,
    oe_host_fd_t oldfd);

oe_result_t oe_syscall_opendir_ocall(
    uint64_t* _retval,
    const char* name);

oe_result_t oe_syscall_readdir_ocall(
    int* _retval,
    uint64_t dirp,
    struct oe_dirent* entry);

oe_result_t oe_syscall_rewinddir_ocall(uint64_t dirp);

oe_result_t oe_syscall_closedir_ocall(
    int* _retval,
    uint64_t dirp);

oe_result_t oe_syscall_stat_ocall(
    int* _retval,
    const char* pathname,
    struct oe_stat_t* buf);

oe_result_t oe_syscall_access_ocall(
    int* _retval,
    const char* pathname,
    int mode);

oe_result_t oe_syscall_link_ocall(
    int* _retval,
    const char* oldpath,
    const char* newpath);

oe_result_t oe_syscall_unlink_ocall(
    int* _retval,
    const char* pathname);

oe_result_t oe_syscall_rename_ocall(
    int* _retval,
    const char* oldpath,
    const char* newpath);

oe_result_t oe_syscall_truncate_ocall(
    int* _retval,
    const char* path,
    oe_off_t length);

oe_result_t oe_syscall_mkdir_ocall(
    int* _retval,
    const char* pathname,
    oe_mode_t mode);

oe_result_t oe_syscall_rmdir_ocall(
    int* _retval,
    const char* pathname);

oe_result_t oe_syscall_fcntl_ocall(
    int* _retval,
    oe_host_fd_t fd,
    int cmd,
    uint64_t arg,
    uint64_t argsize,
    void* argout);

oe_result_t oe_syscall_ioctl_ocall(
    int* _retval,
    oe_host_fd_t fd,
    uint64_t request,
    uint64_t arg,
    uint64_t argsize,
    void* argout);

oe_result_t oe_syscall_poll_ocall(
    int* _retval,
    struct oe_host_pollfd* host_fds,
    oe_nfds_t nfds,
    int timeout);

oe_result_t oe_syscall_kill_ocall(
    int* _retval,
    int pid,
    int signum);

oe_result_t oe_syscall_close_socket_ocall(
    int* _retval,
    oe_host_fd_t sockfd);

oe_result_t oe_syscall_socket_ocall(
    oe_host_fd_t* _retval,
    int domain,
    int type,
    int protocol);

oe_result_t oe_syscall_shutdown_sockets_device_ocall(
    int* _retval,
    oe_host_fd_t sockfd);

oe_result_t oe_syscall_socketpair_ocall(
    int* _retval,
    int domain,
    int type,
    int protocol,
    oe_host_fd_t sv[2]);

oe_result_t oe_syscall_connect_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    const struct oe_sockaddr* addr,
    oe_socklen_t addrlen);

oe_result_t oe_syscall_accept_ocall(
    oe_host_fd_t* _retval,
    oe_host_fd_t sockfd,
    struct oe_sockaddr* addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

oe_result_t oe_syscall_bind_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    const struct oe_sockaddr* addr,
    oe_socklen_t addrlen);

oe_result_t oe_syscall_listen_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    int backlog);

oe_result_t oe_syscall_recvmsg_ocall(
    ssize_t* _retval,
    oe_host_fd_t sockfd,
    void* msg_name,
    oe_socklen_t msg_namelen,
    oe_socklen_t* msg_namelen_out,
    void* msg_iov_buf,
    size_t msg_iovlen,
    size_t msg_iov_buf_size,
    void* msg_control,
    size_t msg_controllen,
    size_t* msg_controllen_out,
    int flags);

oe_result_t oe_syscall_sendmsg_ocall(
    ssize_t* _retval,
    oe_host_fd_t sockfd,
    const void* msg_name,
    oe_socklen_t msg_namelen,
    void* msg_iov_buf,
    size_t msg_iovlen,
    size_t msg_iov_buf_size,
    const void* msg_control,
    size_t msg_controllen,
    int flags);

oe_result_t oe_syscall_recv_ocall(
    ssize_t* _retval,
    oe_host_fd_t sockfd,
    void* buf,
    size_t len,
    int flags);

oe_result_t oe_syscall_recvfrom_ocall(
    ssize_t* _retval,
    oe_host_fd_t sockfd,
    void* buf,
    size_t len,
    int flags,
    struct oe_sockaddr* src_addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

oe_result_t oe_syscall_send_ocall(
    ssize_t* _retval,
    oe_host_fd_t sockfd,
    const void* buf,
    size_t len,
    int flags);

oe_result_t oe_syscall_sendto_ocall(
    ssize_t* _retval,
    oe_host_fd_t sockfd,
    const void* buf,
    size_t len,
    int flags,
    const struct oe_sockaddr* dest_addr,
    oe_socklen_t addrlen);

oe_result_t oe_syscall_recvv_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

oe_result_t oe_syscall_sendv_ocall(
    ssize_t* _retval,
    oe_host_fd_t fd,
    const void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

oe_result_t oe_syscall_shutdown_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    int how);

oe_result_t oe_syscall_setsockopt_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    int level,
    int optname,
    const void* optval,
    oe_socklen_t optlen);

oe_result_t oe_syscall_getsockopt_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    int level,
    int optname,
    void* optval,
    oe_socklen_t optlen_in,
    oe_socklen_t* optlen_out);

oe_result_t oe_syscall_getsockname_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    struct oe_sockaddr* addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

oe_result_t oe_syscall_getpeername_ocall(
    int* _retval,
    oe_host_fd_t sockfd,
    struct oe_sockaddr* addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

oe_result_t oe_syscall_getaddrinfo_open_ocall(
    int* _retval,
    const char* node,
    const char* service,
    const struct oe_addrinfo* hints,
    uint64_t* handle);

oe_result_t oe_syscall_getaddrinfo_read_ocall(
    int* _retval,
    uint64_t handle,
    int* ai_flags,
    int* ai_family,
    int* ai_socktype,
    int* ai_protocol,
    oe_socklen_t ai_addrlen_in,
    oe_socklen_t* ai_addrlen,
    struct oe_sockaddr* ai_addr,
    size_t ai_canonnamelen_in,
    size_t* ai_canonnamelen,
    char* ai_canonname);

oe_result_t oe_syscall_getaddrinfo_close_ocall(
    int* _retval,
    uint64_t handle);

oe_result_t oe_syscall_getnameinfo_ocall(
    int* _retval,
    const struct oe_sockaddr* sa,
    oe_socklen_t salen,
    char* host,
    oe_socklen_t hostlen,
    char* serv,
    oe_socklen_t servlen,
    int flags);

oe_result_t oe_syscall_nanosleep_ocall(
    int* _retval,
    struct oe_timespec* req,
    struct oe_timespec* rem);

oe_result_t oe_syscall_getpid_ocall(int* _retval);

oe_result_t oe_syscall_getppid_ocall(int* _retval);

oe_result_t oe_syscall_getpgrp_ocall(int* _retval);

oe_result_t oe_syscall_getuid_ocall(unsigned int* _retval);

oe_result_t oe_syscall_geteuid_ocall(unsigned int* _retval);

oe_result_t oe_syscall_getgid_ocall(unsigned int* _retval);

oe_result_t oe_syscall_getegid_ocall(unsigned int* _retval);

oe_result_t oe_syscall_getpgid_ocall(
    int* _retval,
    int pid);

oe_result_t oe_syscall_getgroups_ocall(
    int* _retval,
    size_t size,
    unsigned int* list);

oe_result_t oe_syscall_uname_ocall(
    int* _retval,
    struct oe_utsname* buf);

oe_result_t oe_get_supported_attester_format_ids_ocall(
    oe_result_t* _retval,
    void* format_ids,
    size_t format_ids_size,
    size_t* format_ids_size_out);

oe_result_t oe_get_qetarget_info_ocall(
    oe_result_t* _retval,
    const oe_uuid_t* format_id,
    const void* opt_params,
    size_t opt_params_size,
    sgx_target_info_t* target_info);

oe_result_t oe_get_quote_ocall(
    oe_result_t* _retval,
    const oe_uuid_t* format_id,
    const void* opt_params,
    size_t opt_params_size,
    const sgx_report_t* sgx_report,
    void* quote,
    size_t quote_size,
    size_t* quote_size_out);

oe_result_t oe_get_quote_verification_collateral_ocall(
    oe_result_t* _retval,
    uint8_t fmspc[6],
    void* tcb_info,
    size_t tcb_info_size,
    size_t* tcb_info_size_out,
    void* tcb_info_issuer_chain,
    size_t tcb_info_issuer_chain_size,
    size_t* tcb_info_issuer_chain_size_out,
    void* pck_crl,
    size_t pck_crl_size,
    size_t* pck_crl_size_out,
    void* root_ca_crl,
    size_t root_ca_crl_size,
    size_t* root_ca_crl_size_out,
    void* pck_crl_issuer_chain,
    size_t pck_crl_issuer_chain_size,
    size_t* pck_crl_issuer_chain_size_out,
    void* qe_identity,
    size_t qe_identity_size,
    size_t* qe_identity_size_out,
    void* qe_identity_issuer_chain,
    size_t qe_identity_issuer_chain_size,
    size_t* qe_identity_issuer_chain_size_out);

oe_result_t oe_sgx_get_cpuid_table_ocall(
    oe_result_t* _retval,
    void* cpuid_table_buffer,
    size_t cpuid_table_buffer_size);

oe_result_t oe_sgx_backtrace_symbols_ocall(
    oe_result_t* _retval,
    oe_enclave_t* oe_enclave,
    const uint64_t* buffer,
    size_t size,
    void* symbols_buffer,
    size_t symbols_buffer_size,
    size_t* symbols_buffer_size_out);

oe_result_t oe_sgx_thread_wake_wait_ocall(
    oe_enclave_t* oe_enclave,
    uint64_t waiter_tcs,
    uint64_t self_tcs);

oe_result_t oe_sgx_wake_switchless_worker_ocall(oe_host_worker_context_t* context);

oe_result_t oe_sgx_sleep_switchless_worker_ocall(oe_enclave_worker_context_t* context);

OE_EXTERNC_END

#endif // EDGER8R_LOCALATTESTATION_T_H
